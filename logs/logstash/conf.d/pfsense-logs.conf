#tcp syslogs stream via 5140
input {  
  tcp {
    type => "syslog"
    port => 5140
  }
}
#udp syslogs stream via 5140
input {  
  udp {
    type => "syslog"
    port => 5140
  }
}

filter {
  if [host] =~ /172\.19\.0\.1/ { 
    grok {
      match => [ "message", "<(?<evtid>.*)>(?<datetime>(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):(?:[0-5][0-9]):(?:[0-5][0-9])) (?<prog>.*?): (?<msg>.*)" ]        }
      mutate { 
        gsub => ["datetime","  "," "]
      }
      date { 
        match => [ "datetime", "MMM dd HH:mm:ss" ] timezone => "America/New_York"
      }
      mutate { 
        replace => [ "message", "%{msg}" ]
      } 
      mutate {
        remove_field => [ "msg", "datetime" ]
      }
  if [prog] =~ /^dhcpd$/ { 
    mutate { add_tag => [ "dhcpd" ]
  }
  if [prog] =~ /^suricata/ { 
    mutate { add_tag => [ "SuricataIDPS" ] 
  } 
  #if [message] =~ /^\{/ { 
  #  mutate { 
  #    gsub => [ "message", "[\u0000]", "\\\" ] 
  #  }
  #  json { source => "message" } 
  #}            
  if [prog] =~ /^charon$/ { 
    mutate { 
      add_tag => [ "ipsec" ] 
    }
  }
  if [prog] =~ /^barnyard2/ { 
    mutate { 
      add_tag => [ "barnyard2" ]
    }            
  } 
  if [prog] =~ /^openvpn/ { 
    mutate { 
      add_tag => [ "openvpn" ]
    } 
  } 
  if [prog] =~ /^ntpd/ { 
    mutate { 
      add_tag => [ "ntpd" ] 
    }
  } 
  if [prog] =~ /^php-fpm/ { 
    mutate { 
      add_tag => [ "web_portal" ] 
    } 
    grok { 
      patterns_dir => ["/etc/logstash/conf.d/patterns"] 
      match => [ "message", "%{PFSENSE_APP} %{PFSENSE_APP_DATA}", "message", "%{PFSENSE_APP} %{PFSENSE_APP_DATA}" ] 
    }
    mutate { 
      lowercase => [ 'pfsense_ACTION' ] 
    }
  }
  if [prog] =~ /^apinger/ { 
    mutate { 
      add_tag => [ "apinger" ] 
    } 
  } 
  if [prog] =~ /^filterlog$/ { 
    mutate { 
      remove_field => [ "msg", "datetime" ] 
    } 
    grok { 
      add_tag => [ "firewall" ] patterns_dir => ["/etc/logstash/conf.d/patterns"] 
      match => [ "message", "%{PFSENSE_LOG_DATA}%{PFSENSE_IP_SPECIFIC_DATA}%{PFSENSE_IP_DATA}%{PFSENSE_PROTOCOL_DATA}",                    "message", "%{PFSENSE_LOG_DATA}%{PFSENSE_IPv4_SPECIFIC_DATA_ECN}%{PFSENSE_IP_DATA}%{PFSENSE_PROTOCOL_DATA}" ] 
    }
    mutate { 
      lowercase => [ 'proto' ]
    } 
    if ![geoip] and [src_ip] !~ /^(10\.|192\.168\.)/ { 
      geoip { 
        add_tag => [ "GeoIP" ] source => "src_ip" database => "/etc/logstash/GeoLite2-City.mmdb" 
      }
    }
  }
}

output {
   elasticsearch {
       hosts => [ "elasticsearch:9200" ]
       sniffing => true
       index => "pfsense-logs-%{+YYYY.MM.dd}"
   }
}